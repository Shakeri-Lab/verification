/* Corrected: Tailwind directives MUST come first */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Your other styles can come after */
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  /* It's generally better to let Tailwind handle text/background colors via classes,
     but these can serve as fallbacks if needed. */
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  /* Consider removing display:flex and place-items:center if they interfere
     with your app's root layout, unless you specifically need the
     entire app centered vertically and horizontally within the body.
     Often, you'll control layout within your React components. */
  /* display: flex; */
  /* place-items: center; */
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

/* Consider removing these default button styles if you are primarily
   using Tailwind classes or a component library like shadcn/ui for buttons,
   as these global styles might conflict. */
/*
button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}
*/

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  /*
  button {
    background-color: #f9f9f9;
  }
  */
}

/* Tailwind directives were here, moved to top */
